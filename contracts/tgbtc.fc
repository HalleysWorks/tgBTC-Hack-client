#include "./stdlib.fc";

;; Constants
const OP_MINT = 1;

;; Storage:
;; 0 uint64 totalSupply  
;; 1 addr   admin
;; 2 cell   walletCode

;; Load state from storage
(int, slice, cell) load_state() {
    var s = get_data().begin_parse();
    return (s~load_uint(64), s~load_msg_addr(), s~load_ref());
}

;; Save state to storage
() save_state(int sup, slice adm, cell wc) impure {
    set_data(begin_cell().store_uint(sup, 64).store_slice(adm).store_ref(wc).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; Check if message body is empty
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    ;; Parse the message to get sender address
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_addr = cs~load_msg_addr();
    
    ;; Parse the operation code
    int op = in_msg_body~load_uint(32);

    if (op == OP_MINT) {  ;; mint(to, amount)
        ;; Next comes the "to" address
        slice to = in_msg_body~load_msg_addr();
        ;; Then the amount
        int amount = in_msg_body~load_uint(64);

        ;; Load current state
        (int supply, slice adm, cell wcode) = load_state();

        ;; Authorization check: only the admin can mint
        ;; Check if sender is admin
        throw_unless(401, equal_slice_bits(sender_addr, adm));

        ;; Update total supply
        supply = supply + amount;

        ;; Save back state
        save_state(supply, adm, wcode);

        ;; (Skipping actual wallet deployment in demo)
        return ();
    }
    
    ;; Unknown operation
    throw(0xffff);
}

;; Get method for reading jetton data
(int, int, slice, cell, cell) get_jetton_data() method_id {
    var (s, adm, _) = load_state();
    return (s, 0, adm, begin_cell().end_cell(), begin_cell().end_cell());
}
